# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type DetectLanguageOutput {
  """지역"""
  locale: String!
}

type Error {
  success: Boolean!
  message: String!
}

type Key {
  id: Float!
  name: String!
}

input KeyInput {
  name: String!
}

input LocaleInput {
  """번역을 확인하고 싶은 지역 ko, en, jp"""
  locale: String!

  """등록할 값"""
  value: String!
}

type Mutation {
  """키 생성"""
  createkey(
    """Key의 이름으로 dot와 영어 소문자만 사용가능"""
    data: KeyInput!
  ): Key!

  """키 수정"""
  updatekey(
    """Key의 이름으로 dot와 영어 소문자만 사용가능"""
    data: UpdateKeyInput!
  ): UpdateOutput!
  createtranslation(
    data: LocaleInput!

    """키 id"""
    keyId: Float!
  ): Translation!

  """키의 특정 언어 번역 수정하기"""
  updateTranslationByIdAndLocale(
    data: LocaleInput!

    """키 id"""
    keyId: Float!
  ): String!
}

type Ok {
  success: Boolean!
  message: String!
}

type Query {
  key: String!
  keys: [Key!]!
  getTranslation: [Translation!]!

  """키의 모든 번역 확인하기"""
  translations(
    """키의 id"""
    id: Float!
  ): [Translation!]!

  """키의 특정 언어 번역 확인하기"""
  localetranslation(data: TranslationInput!): Translation!
  detectlanguage(
    """번역을 확인하고 싶은 값"""
    message: String!
  ): DetectLanguageOutput!
}

type Translation {
  id: Float!
  locale: String!
  value: String!
  key: Key!
}

input TranslationInput {
  """key의 id"""
  id: Float!

  """번역을 확인하고 싶은 지역 ko, en, jp"""
  locale: String!
}

input UpdateKeyInput {
  name: String!

  """업데이트 할 아이디 값"""
  id: Float!
}

union UpdateOutput = Ok | Error
